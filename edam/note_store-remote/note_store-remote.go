// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/camilobernal/miranda/edam"
)

var _ = edam.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  SyncState getSyncState(string authenticationToken)")
  fmt.Fprintln(os.Stderr, "  SyncChunk getFilteredSyncChunk(string authenticationToken, i32 afterUSN, i32 maxEntries, SyncChunkFilter filter)")
  fmt.Fprintln(os.Stderr, "  SyncState getLinkedNotebookSyncState(string authenticationToken, LinkedNotebook linkedNotebook)")
  fmt.Fprintln(os.Stderr, "  SyncChunk getLinkedNotebookSyncChunk(string authenticationToken, LinkedNotebook linkedNotebook, i32 afterUSN, i32 maxEntries, bool fullSyncOnly)")
  fmt.Fprintln(os.Stderr, "   listNotebooks(string authenticationToken)")
  fmt.Fprintln(os.Stderr, "   listAccessibleBusinessNotebooks(string authenticationToken)")
  fmt.Fprintln(os.Stderr, "  Notebook getNotebook(string authenticationToken, Guid guid)")
  fmt.Fprintln(os.Stderr, "  Notebook getDefaultNotebook(string authenticationToken)")
  fmt.Fprintln(os.Stderr, "  Notebook createNotebook(string authenticationToken, Notebook notebook)")
  fmt.Fprintln(os.Stderr, "  i32 updateNotebook(string authenticationToken, Notebook notebook)")
  fmt.Fprintln(os.Stderr, "  i32 expungeNotebook(string authenticationToken, Guid guid)")
  fmt.Fprintln(os.Stderr, "   listTags(string authenticationToken)")
  fmt.Fprintln(os.Stderr, "   listTagsByNotebook(string authenticationToken, Guid notebookGuid)")
  fmt.Fprintln(os.Stderr, "  Tag getTag(string authenticationToken, Guid guid)")
  fmt.Fprintln(os.Stderr, "  Tag createTag(string authenticationToken, Tag tag)")
  fmt.Fprintln(os.Stderr, "  i32 updateTag(string authenticationToken, Tag tag)")
  fmt.Fprintln(os.Stderr, "  void untagAll(string authenticationToken, Guid guid)")
  fmt.Fprintln(os.Stderr, "  i32 expungeTag(string authenticationToken, Guid guid)")
  fmt.Fprintln(os.Stderr, "   listSearches(string authenticationToken)")
  fmt.Fprintln(os.Stderr, "  SavedSearch getSearch(string authenticationToken, Guid guid)")
  fmt.Fprintln(os.Stderr, "  SavedSearch createSearch(string authenticationToken, SavedSearch search)")
  fmt.Fprintln(os.Stderr, "  i32 updateSearch(string authenticationToken, SavedSearch search)")
  fmt.Fprintln(os.Stderr, "  i32 expungeSearch(string authenticationToken, Guid guid)")
  fmt.Fprintln(os.Stderr, "  i32 findNoteOffset(string authenticationToken, NoteFilter filter, Guid guid)")
  fmt.Fprintln(os.Stderr, "  NotesMetadataList findNotesMetadata(string authenticationToken, NoteFilter filter, i32 offset, i32 maxNotes, NotesMetadataResultSpec resultSpec)")
  fmt.Fprintln(os.Stderr, "  NoteCollectionCounts findNoteCounts(string authenticationToken, NoteFilter filter, bool withTrash)")
  fmt.Fprintln(os.Stderr, "  Note getNoteWithResultSpec(string authenticationToken, Guid guid, NoteResultSpec resultSpec)")
  fmt.Fprintln(os.Stderr, "  Note getNote(string authenticationToken, Guid guid, bool withContent, bool withResourcesData, bool withResourcesRecognition, bool withResourcesAlternateData)")
  fmt.Fprintln(os.Stderr, "  LazyMap getNoteApplicationData(string authenticationToken, Guid guid)")
  fmt.Fprintln(os.Stderr, "  string getNoteApplicationDataEntry(string authenticationToken, Guid guid, string key)")
  fmt.Fprintln(os.Stderr, "  i32 setNoteApplicationDataEntry(string authenticationToken, Guid guid, string key, string value)")
  fmt.Fprintln(os.Stderr, "  i32 unsetNoteApplicationDataEntry(string authenticationToken, Guid guid, string key)")
  fmt.Fprintln(os.Stderr, "  string getNoteContent(string authenticationToken, Guid guid)")
  fmt.Fprintln(os.Stderr, "  string getNoteSearchText(string authenticationToken, Guid guid, bool noteOnly, bool tokenizeForIndexing)")
  fmt.Fprintln(os.Stderr, "  string getResourceSearchText(string authenticationToken, Guid guid)")
  fmt.Fprintln(os.Stderr, "   getNoteTagNames(string authenticationToken, Guid guid)")
  fmt.Fprintln(os.Stderr, "  Note createNote(string authenticationToken, Note note)")
  fmt.Fprintln(os.Stderr, "  Note updateNote(string authenticationToken, Note note)")
  fmt.Fprintln(os.Stderr, "  i32 deleteNote(string authenticationToken, Guid guid)")
  fmt.Fprintln(os.Stderr, "  i32 expungeNote(string authenticationToken, Guid guid)")
  fmt.Fprintln(os.Stderr, "  Note copyNote(string authenticationToken, Guid noteGuid, Guid toNotebookGuid)")
  fmt.Fprintln(os.Stderr, "   listNoteVersions(string authenticationToken, Guid noteGuid)")
  fmt.Fprintln(os.Stderr, "  Note getNoteVersion(string authenticationToken, Guid noteGuid, i32 updateSequenceNum, bool withResourcesData, bool withResourcesRecognition, bool withResourcesAlternateData)")
  fmt.Fprintln(os.Stderr, "  Resource getResource(string authenticationToken, Guid guid, bool withData, bool withRecognition, bool withAttributes, bool withAlternateData)")
  fmt.Fprintln(os.Stderr, "  LazyMap getResourceApplicationData(string authenticationToken, Guid guid)")
  fmt.Fprintln(os.Stderr, "  string getResourceApplicationDataEntry(string authenticationToken, Guid guid, string key)")
  fmt.Fprintln(os.Stderr, "  i32 setResourceApplicationDataEntry(string authenticationToken, Guid guid, string key, string value)")
  fmt.Fprintln(os.Stderr, "  i32 unsetResourceApplicationDataEntry(string authenticationToken, Guid guid, string key)")
  fmt.Fprintln(os.Stderr, "  i32 updateResource(string authenticationToken, Resource resource)")
  fmt.Fprintln(os.Stderr, "  string getResourceData(string authenticationToken, Guid guid)")
  fmt.Fprintln(os.Stderr, "  Resource getResourceByHash(string authenticationToken, Guid noteGuid, string contentHash, bool withData, bool withRecognition, bool withAlternateData)")
  fmt.Fprintln(os.Stderr, "  string getResourceRecognition(string authenticationToken, Guid guid)")
  fmt.Fprintln(os.Stderr, "  string getResourceAlternateData(string authenticationToken, Guid guid)")
  fmt.Fprintln(os.Stderr, "  ResourceAttributes getResourceAttributes(string authenticationToken, Guid guid)")
  fmt.Fprintln(os.Stderr, "  Notebook getPublicNotebook(UserID userId, string publicUri)")
  fmt.Fprintln(os.Stderr, "  SharedNotebook shareNotebook(string authenticationToken, SharedNotebook sharedNotebook, string message)")
  fmt.Fprintln(os.Stderr, "  CreateOrUpdateNotebookSharesResult createOrUpdateNotebookShares(string authenticationToken, NotebookShareTemplate shareTemplate)")
  fmt.Fprintln(os.Stderr, "  i32 updateSharedNotebook(string authenticationToken, SharedNotebook sharedNotebook)")
  fmt.Fprintln(os.Stderr, "  Notebook setNotebookRecipientSettings(string authenticationToken, string notebookGuid, NotebookRecipientSettings recipientSettings)")
  fmt.Fprintln(os.Stderr, "   listSharedNotebooks(string authenticationToken)")
  fmt.Fprintln(os.Stderr, "  LinkedNotebook createLinkedNotebook(string authenticationToken, LinkedNotebook linkedNotebook)")
  fmt.Fprintln(os.Stderr, "  i32 updateLinkedNotebook(string authenticationToken, LinkedNotebook linkedNotebook)")
  fmt.Fprintln(os.Stderr, "   listLinkedNotebooks(string authenticationToken)")
  fmt.Fprintln(os.Stderr, "  i32 expungeLinkedNotebook(string authenticationToken, Guid guid)")
  fmt.Fprintln(os.Stderr, "  AuthenticationResult authenticateToSharedNotebook(string shareKeyOrGlobalId, string authenticationToken)")
  fmt.Fprintln(os.Stderr, "  SharedNotebook getSharedNotebookByAuth(string authenticationToken)")
  fmt.Fprintln(os.Stderr, "  void emailNote(string authenticationToken, NoteEmailParameters parameters)")
  fmt.Fprintln(os.Stderr, "  string shareNote(string authenticationToken, Guid guid)")
  fmt.Fprintln(os.Stderr, "  void stopSharingNote(string authenticationToken, Guid guid)")
  fmt.Fprintln(os.Stderr, "  AuthenticationResult authenticateToSharedNote(string guid, string noteKey, string authenticationToken)")
  fmt.Fprintln(os.Stderr, "  RelatedResult findRelated(string authenticationToken, RelatedQuery query, RelatedResultSpec resultSpec)")
  fmt.Fprintln(os.Stderr, "  UpdateNoteIfUsnMatchesResult updateNoteIfUsnMatches(string authenticationToken, Note note)")
  fmt.Fprintln(os.Stderr, "  ManageNotebookSharesResult manageNotebookShares(string authenticationToken, ManageNotebookSharesParameters parameters)")
  fmt.Fprintln(os.Stderr, "  ShareRelationships getNotebookShares(string authenticationToken, string notebookGuid)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := edam.NewNoteStoreClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "getSyncState":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSyncState requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetSyncState(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getFilteredSyncChunk":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetFilteredSyncChunk requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err210 := (strconv.Atoi(flag.Arg(2)))
    if err210 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    tmp2, err211 := (strconv.Atoi(flag.Arg(3)))
    if err211 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    arg212 := flag.Arg(4)
    mbTrans213 := thrift.NewTMemoryBufferLen(len(arg212))
    defer mbTrans213.Close()
    _, err214 := mbTrans213.WriteString(arg212)
    if err214 != nil {
      Usage()
      return
    }
    factory215 := thrift.NewTJSONProtocolFactory()
    jsProt216 := factory215.GetProtocol(mbTrans213)
    argvalue3 := edam.NewSyncChunkFilter()
    err217 := argvalue3.Read(jsProt216)
    if err217 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.GetFilteredSyncChunk(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getLinkedNotebookSyncState":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetLinkedNotebookSyncState requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg219 := flag.Arg(2)
    mbTrans220 := thrift.NewTMemoryBufferLen(len(arg219))
    defer mbTrans220.Close()
    _, err221 := mbTrans220.WriteString(arg219)
    if err221 != nil {
      Usage()
      return
    }
    factory222 := thrift.NewTJSONProtocolFactory()
    jsProt223 := factory222.GetProtocol(mbTrans220)
    argvalue1 := edam.NewLinkedNotebook()
    err224 := argvalue1.Read(jsProt223)
    if err224 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GetLinkedNotebookSyncState(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getLinkedNotebookSyncChunk":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "GetLinkedNotebookSyncChunk requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg226 := flag.Arg(2)
    mbTrans227 := thrift.NewTMemoryBufferLen(len(arg226))
    defer mbTrans227.Close()
    _, err228 := mbTrans227.WriteString(arg226)
    if err228 != nil {
      Usage()
      return
    }
    factory229 := thrift.NewTJSONProtocolFactory()
    jsProt230 := factory229.GetProtocol(mbTrans227)
    argvalue1 := edam.NewLinkedNotebook()
    err231 := argvalue1.Read(jsProt230)
    if err231 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err232 := (strconv.Atoi(flag.Arg(3)))
    if err232 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    tmp3, err233 := (strconv.Atoi(flag.Arg(4)))
    if err233 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    argvalue4 := flag.Arg(5) == "true"
    value4 := argvalue4
    fmt.Print(client.GetLinkedNotebookSyncChunk(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "listNotebooks":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListNotebooks requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.ListNotebooks(context.Background(), value0))
    fmt.Print("\n")
    break
  case "listAccessibleBusinessNotebooks":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListAccessibleBusinessNotebooks requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.ListAccessibleBusinessNotebooks(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getNotebook":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetNotebook requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.GetNotebook(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getDefaultNotebook":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetDefaultNotebook requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetDefaultNotebook(context.Background(), value0))
    fmt.Print("\n")
    break
  case "createNotebook":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CreateNotebook requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg241 := flag.Arg(2)
    mbTrans242 := thrift.NewTMemoryBufferLen(len(arg241))
    defer mbTrans242.Close()
    _, err243 := mbTrans242.WriteString(arg241)
    if err243 != nil {
      Usage()
      return
    }
    factory244 := thrift.NewTJSONProtocolFactory()
    jsProt245 := factory244.GetProtocol(mbTrans242)
    argvalue1 := edam.NewNotebook()
    err246 := argvalue1.Read(jsProt245)
    if err246 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.CreateNotebook(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateNotebook":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateNotebook requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg248 := flag.Arg(2)
    mbTrans249 := thrift.NewTMemoryBufferLen(len(arg248))
    defer mbTrans249.Close()
    _, err250 := mbTrans249.WriteString(arg248)
    if err250 != nil {
      Usage()
      return
    }
    factory251 := thrift.NewTJSONProtocolFactory()
    jsProt252 := factory251.GetProtocol(mbTrans249)
    argvalue1 := edam.NewNotebook()
    err253 := argvalue1.Read(jsProt252)
    if err253 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateNotebook(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "expungeNotebook":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ExpungeNotebook requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.ExpungeNotebook(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "listTags":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListTags requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.ListTags(context.Background(), value0))
    fmt.Print("\n")
    break
  case "listTagsByNotebook":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ListTagsByNotebook requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.ListTagsByNotebook(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getTag":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetTag requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.GetTag(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "createTag":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CreateTag requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg262 := flag.Arg(2)
    mbTrans263 := thrift.NewTMemoryBufferLen(len(arg262))
    defer mbTrans263.Close()
    _, err264 := mbTrans263.WriteString(arg262)
    if err264 != nil {
      Usage()
      return
    }
    factory265 := thrift.NewTJSONProtocolFactory()
    jsProt266 := factory265.GetProtocol(mbTrans263)
    argvalue1 := edam.NewTag()
    err267 := argvalue1.Read(jsProt266)
    if err267 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.CreateTag(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateTag":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateTag requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg269 := flag.Arg(2)
    mbTrans270 := thrift.NewTMemoryBufferLen(len(arg269))
    defer mbTrans270.Close()
    _, err271 := mbTrans270.WriteString(arg269)
    if err271 != nil {
      Usage()
      return
    }
    factory272 := thrift.NewTJSONProtocolFactory()
    jsProt273 := factory272.GetProtocol(mbTrans270)
    argvalue1 := edam.NewTag()
    err274 := argvalue1.Read(jsProt273)
    if err274 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateTag(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "untagAll":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UntagAll requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.UntagAll(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "expungeTag":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ExpungeTag requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.ExpungeTag(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "listSearches":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListSearches requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.ListSearches(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getSearch":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetSearch requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.GetSearch(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "createSearch":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CreateSearch requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg283 := flag.Arg(2)
    mbTrans284 := thrift.NewTMemoryBufferLen(len(arg283))
    defer mbTrans284.Close()
    _, err285 := mbTrans284.WriteString(arg283)
    if err285 != nil {
      Usage()
      return
    }
    factory286 := thrift.NewTJSONProtocolFactory()
    jsProt287 := factory286.GetProtocol(mbTrans284)
    argvalue1 := edam.NewSavedSearch()
    err288 := argvalue1.Read(jsProt287)
    if err288 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.CreateSearch(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateSearch":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateSearch requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg290 := flag.Arg(2)
    mbTrans291 := thrift.NewTMemoryBufferLen(len(arg290))
    defer mbTrans291.Close()
    _, err292 := mbTrans291.WriteString(arg290)
    if err292 != nil {
      Usage()
      return
    }
    factory293 := thrift.NewTJSONProtocolFactory()
    jsProt294 := factory293.GetProtocol(mbTrans291)
    argvalue1 := edam.NewSavedSearch()
    err295 := argvalue1.Read(jsProt294)
    if err295 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateSearch(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "expungeSearch":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ExpungeSearch requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.ExpungeSearch(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "findNoteOffset":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "FindNoteOffset requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg299 := flag.Arg(2)
    mbTrans300 := thrift.NewTMemoryBufferLen(len(arg299))
    defer mbTrans300.Close()
    _, err301 := mbTrans300.WriteString(arg299)
    if err301 != nil {
      Usage()
      return
    }
    factory302 := thrift.NewTJSONProtocolFactory()
    jsProt303 := factory302.GetProtocol(mbTrans300)
    argvalue1 := edam.NewNoteFilter()
    err304 := argvalue1.Read(jsProt303)
    if err304 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := edam.GUID(argvalue2)
    fmt.Print(client.FindNoteOffset(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "findNotesMetadata":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "FindNotesMetadata requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg307 := flag.Arg(2)
    mbTrans308 := thrift.NewTMemoryBufferLen(len(arg307))
    defer mbTrans308.Close()
    _, err309 := mbTrans308.WriteString(arg307)
    if err309 != nil {
      Usage()
      return
    }
    factory310 := thrift.NewTJSONProtocolFactory()
    jsProt311 := factory310.GetProtocol(mbTrans308)
    argvalue1 := edam.NewNoteFilter()
    err312 := argvalue1.Read(jsProt311)
    if err312 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err313 := (strconv.Atoi(flag.Arg(3)))
    if err313 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    tmp3, err314 := (strconv.Atoi(flag.Arg(4)))
    if err314 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    arg315 := flag.Arg(5)
    mbTrans316 := thrift.NewTMemoryBufferLen(len(arg315))
    defer mbTrans316.Close()
    _, err317 := mbTrans316.WriteString(arg315)
    if err317 != nil {
      Usage()
      return
    }
    factory318 := thrift.NewTJSONProtocolFactory()
    jsProt319 := factory318.GetProtocol(mbTrans316)
    argvalue4 := edam.NewNotesMetadataResultSpec()
    err320 := argvalue4.Read(jsProt319)
    if err320 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    fmt.Print(client.FindNotesMetadata(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "findNoteCounts":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "FindNoteCounts requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg322 := flag.Arg(2)
    mbTrans323 := thrift.NewTMemoryBufferLen(len(arg322))
    defer mbTrans323.Close()
    _, err324 := mbTrans323.WriteString(arg322)
    if err324 != nil {
      Usage()
      return
    }
    factory325 := thrift.NewTJSONProtocolFactory()
    jsProt326 := factory325.GetProtocol(mbTrans323)
    argvalue1 := edam.NewNoteFilter()
    err327 := argvalue1.Read(jsProt326)
    if err327 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.FindNoteCounts(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getNoteWithResultSpec":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetNoteWithResultSpec requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    arg331 := flag.Arg(3)
    mbTrans332 := thrift.NewTMemoryBufferLen(len(arg331))
    defer mbTrans332.Close()
    _, err333 := mbTrans332.WriteString(arg331)
    if err333 != nil {
      Usage()
      return
    }
    factory334 := thrift.NewTJSONProtocolFactory()
    jsProt335 := factory334.GetProtocol(mbTrans332)
    argvalue2 := edam.NewNoteResultSpec()
    err336 := argvalue2.Read(jsProt335)
    if err336 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.GetNoteWithResultSpec(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getNote":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "GetNote requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    argvalue4 := flag.Arg(5) == "true"
    value4 := argvalue4
    argvalue5 := flag.Arg(6) == "true"
    value5 := argvalue5
    fmt.Print(client.GetNote(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "getNoteApplicationData":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetNoteApplicationData requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.GetNoteApplicationData(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getNoteApplicationDataEntry":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetNoteApplicationDataEntry requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetNoteApplicationDataEntry(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "setNoteApplicationDataEntry":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SetNoteApplicationDataEntry requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.SetNoteApplicationDataEntry(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "unsetNoteApplicationDataEntry":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UnsetNoteApplicationDataEntry requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.UnsetNoteApplicationDataEntry(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getNoteContent":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetNoteContent requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.GetNoteContent(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getNoteSearchText":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetNoteSearchText requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.GetNoteSearchText(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getResourceSearchText":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetResourceSearchText requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.GetResourceSearchText(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getNoteTagNames":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetNoteTagNames requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.GetNoteTagNames(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "createNote":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CreateNote requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg366 := flag.Arg(2)
    mbTrans367 := thrift.NewTMemoryBufferLen(len(arg366))
    defer mbTrans367.Close()
    _, err368 := mbTrans367.WriteString(arg366)
    if err368 != nil {
      Usage()
      return
    }
    factory369 := thrift.NewTJSONProtocolFactory()
    jsProt370 := factory369.GetProtocol(mbTrans367)
    argvalue1 := edam.NewNote()
    err371 := argvalue1.Read(jsProt370)
    if err371 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.CreateNote(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateNote":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateNote requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg373 := flag.Arg(2)
    mbTrans374 := thrift.NewTMemoryBufferLen(len(arg373))
    defer mbTrans374.Close()
    _, err375 := mbTrans374.WriteString(arg373)
    if err375 != nil {
      Usage()
      return
    }
    factory376 := thrift.NewTJSONProtocolFactory()
    jsProt377 := factory376.GetProtocol(mbTrans374)
    argvalue1 := edam.NewNote()
    err378 := argvalue1.Read(jsProt377)
    if err378 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateNote(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "deleteNote":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DeleteNote requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.DeleteNote(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "expungeNote":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ExpungeNote requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.ExpungeNote(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "copyNote":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "CopyNote requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    argvalue2 := flag.Arg(3)
    value2 := edam.GUID(argvalue2)
    fmt.Print(client.CopyNote(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "listNoteVersions":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ListNoteVersions requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.ListNoteVersions(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getNoteVersion":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "GetNoteVersion requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    tmp2, err390 := (strconv.Atoi(flag.Arg(3)))
    if err390 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    argvalue4 := flag.Arg(5) == "true"
    value4 := argvalue4
    argvalue5 := flag.Arg(6) == "true"
    value5 := argvalue5
    fmt.Print(client.GetNoteVersion(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "getResource":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "GetResource requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    argvalue4 := flag.Arg(5) == "true"
    value4 := argvalue4
    argvalue5 := flag.Arg(6) == "true"
    value5 := argvalue5
    fmt.Print(client.GetResource(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "getResourceApplicationData":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetResourceApplicationData requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.GetResourceApplicationData(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getResourceApplicationDataEntry":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetResourceApplicationDataEntry requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetResourceApplicationDataEntry(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "setResourceApplicationDataEntry":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SetResourceApplicationDataEntry requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.SetResourceApplicationDataEntry(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "unsetResourceApplicationDataEntry":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UnsetResourceApplicationDataEntry requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.UnsetResourceApplicationDataEntry(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "updateResource":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateResource requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg413 := flag.Arg(2)
    mbTrans414 := thrift.NewTMemoryBufferLen(len(arg413))
    defer mbTrans414.Close()
    _, err415 := mbTrans414.WriteString(arg413)
    if err415 != nil {
      Usage()
      return
    }
    factory416 := thrift.NewTJSONProtocolFactory()
    jsProt417 := factory416.GetProtocol(mbTrans414)
    argvalue1 := edam.NewResource()
    err418 := argvalue1.Read(jsProt417)
    if err418 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateResource(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getResourceData":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetResourceData requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.GetResourceData(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getResourceByHash":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "GetResourceByHash requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    argvalue4 := flag.Arg(5) == "true"
    value4 := argvalue4
    argvalue5 := flag.Arg(6) == "true"
    value5 := argvalue5
    fmt.Print(client.GetResourceByHash(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "getResourceRecognition":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetResourceRecognition requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.GetResourceRecognition(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getResourceAlternateData":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetResourceAlternateData requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.GetResourceAlternateData(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getResourceAttributes":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetResourceAttributes requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.GetResourceAttributes(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getPublicNotebook":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetPublicNotebook requires 2 args")
      flag.Usage()
    }
    tmp0, err433 := (strconv.Atoi(flag.Arg(1)))
    if err433 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := edam.UserID(argvalue0)
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetPublicNotebook(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "shareNotebook":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ShareNotebook requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg436 := flag.Arg(2)
    mbTrans437 := thrift.NewTMemoryBufferLen(len(arg436))
    defer mbTrans437.Close()
    _, err438 := mbTrans437.WriteString(arg436)
    if err438 != nil {
      Usage()
      return
    }
    factory439 := thrift.NewTJSONProtocolFactory()
    jsProt440 := factory439.GetProtocol(mbTrans437)
    argvalue1 := edam.NewSharedNotebook()
    err441 := argvalue1.Read(jsProt440)
    if err441 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.ShareNotebook(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "createOrUpdateNotebookShares":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CreateOrUpdateNotebookShares requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg444 := flag.Arg(2)
    mbTrans445 := thrift.NewTMemoryBufferLen(len(arg444))
    defer mbTrans445.Close()
    _, err446 := mbTrans445.WriteString(arg444)
    if err446 != nil {
      Usage()
      return
    }
    factory447 := thrift.NewTJSONProtocolFactory()
    jsProt448 := factory447.GetProtocol(mbTrans445)
    argvalue1 := edam.NewNotebookShareTemplate()
    err449 := argvalue1.Read(jsProt448)
    if err449 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.CreateOrUpdateNotebookShares(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateSharedNotebook":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateSharedNotebook requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg451 := flag.Arg(2)
    mbTrans452 := thrift.NewTMemoryBufferLen(len(arg451))
    defer mbTrans452.Close()
    _, err453 := mbTrans452.WriteString(arg451)
    if err453 != nil {
      Usage()
      return
    }
    factory454 := thrift.NewTJSONProtocolFactory()
    jsProt455 := factory454.GetProtocol(mbTrans452)
    argvalue1 := edam.NewSharedNotebook()
    err456 := argvalue1.Read(jsProt455)
    if err456 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateSharedNotebook(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "setNotebookRecipientSettings":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SetNotebookRecipientSettings requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg459 := flag.Arg(3)
    mbTrans460 := thrift.NewTMemoryBufferLen(len(arg459))
    defer mbTrans460.Close()
    _, err461 := mbTrans460.WriteString(arg459)
    if err461 != nil {
      Usage()
      return
    }
    factory462 := thrift.NewTJSONProtocolFactory()
    jsProt463 := factory462.GetProtocol(mbTrans460)
    argvalue2 := edam.NewNotebookRecipientSettings()
    err464 := argvalue2.Read(jsProt463)
    if err464 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.SetNotebookRecipientSettings(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "listSharedNotebooks":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListSharedNotebooks requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.ListSharedNotebooks(context.Background(), value0))
    fmt.Print("\n")
    break
  case "createLinkedNotebook":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CreateLinkedNotebook requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg467 := flag.Arg(2)
    mbTrans468 := thrift.NewTMemoryBufferLen(len(arg467))
    defer mbTrans468.Close()
    _, err469 := mbTrans468.WriteString(arg467)
    if err469 != nil {
      Usage()
      return
    }
    factory470 := thrift.NewTJSONProtocolFactory()
    jsProt471 := factory470.GetProtocol(mbTrans468)
    argvalue1 := edam.NewLinkedNotebook()
    err472 := argvalue1.Read(jsProt471)
    if err472 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.CreateLinkedNotebook(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateLinkedNotebook":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateLinkedNotebook requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg474 := flag.Arg(2)
    mbTrans475 := thrift.NewTMemoryBufferLen(len(arg474))
    defer mbTrans475.Close()
    _, err476 := mbTrans475.WriteString(arg474)
    if err476 != nil {
      Usage()
      return
    }
    factory477 := thrift.NewTJSONProtocolFactory()
    jsProt478 := factory477.GetProtocol(mbTrans475)
    argvalue1 := edam.NewLinkedNotebook()
    err479 := argvalue1.Read(jsProt478)
    if err479 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateLinkedNotebook(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "listLinkedNotebooks":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListLinkedNotebooks requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.ListLinkedNotebooks(context.Background(), value0))
    fmt.Print("\n")
    break
  case "expungeLinkedNotebook":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ExpungeLinkedNotebook requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.ExpungeLinkedNotebook(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "authenticateToSharedNotebook":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AuthenticateToSharedNotebook requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.AuthenticateToSharedNotebook(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getSharedNotebookByAuth":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSharedNotebookByAuth requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetSharedNotebookByAuth(context.Background(), value0))
    fmt.Print("\n")
    break
  case "emailNote":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "EmailNote requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg487 := flag.Arg(2)
    mbTrans488 := thrift.NewTMemoryBufferLen(len(arg487))
    defer mbTrans488.Close()
    _, err489 := mbTrans488.WriteString(arg487)
    if err489 != nil {
      Usage()
      return
    }
    factory490 := thrift.NewTJSONProtocolFactory()
    jsProt491 := factory490.GetProtocol(mbTrans488)
    argvalue1 := edam.NewNoteEmailParameters()
    err492 := argvalue1.Read(jsProt491)
    if err492 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.EmailNote(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "shareNote":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ShareNote requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.ShareNote(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "stopSharingNote":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "StopSharingNote requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := edam.GUID(argvalue1)
    fmt.Print(client.StopSharingNote(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "authenticateToSharedNote":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AuthenticateToSharedNote requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.AuthenticateToSharedNote(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "findRelated":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "FindRelated requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg501 := flag.Arg(2)
    mbTrans502 := thrift.NewTMemoryBufferLen(len(arg501))
    defer mbTrans502.Close()
    _, err503 := mbTrans502.WriteString(arg501)
    if err503 != nil {
      Usage()
      return
    }
    factory504 := thrift.NewTJSONProtocolFactory()
    jsProt505 := factory504.GetProtocol(mbTrans502)
    argvalue1 := edam.NewRelatedQuery()
    err506 := argvalue1.Read(jsProt505)
    if err506 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg507 := flag.Arg(3)
    mbTrans508 := thrift.NewTMemoryBufferLen(len(arg507))
    defer mbTrans508.Close()
    _, err509 := mbTrans508.WriteString(arg507)
    if err509 != nil {
      Usage()
      return
    }
    factory510 := thrift.NewTJSONProtocolFactory()
    jsProt511 := factory510.GetProtocol(mbTrans508)
    argvalue2 := edam.NewRelatedResultSpec()
    err512 := argvalue2.Read(jsProt511)
    if err512 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.FindRelated(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "updateNoteIfUsnMatches":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateNoteIfUsnMatches requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg514 := flag.Arg(2)
    mbTrans515 := thrift.NewTMemoryBufferLen(len(arg514))
    defer mbTrans515.Close()
    _, err516 := mbTrans515.WriteString(arg514)
    if err516 != nil {
      Usage()
      return
    }
    factory517 := thrift.NewTJSONProtocolFactory()
    jsProt518 := factory517.GetProtocol(mbTrans515)
    argvalue1 := edam.NewNote()
    err519 := argvalue1.Read(jsProt518)
    if err519 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateNoteIfUsnMatches(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "manageNotebookShares":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ManageNotebookShares requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg521 := flag.Arg(2)
    mbTrans522 := thrift.NewTMemoryBufferLen(len(arg521))
    defer mbTrans522.Close()
    _, err523 := mbTrans522.WriteString(arg521)
    if err523 != nil {
      Usage()
      return
    }
    factory524 := thrift.NewTJSONProtocolFactory()
    jsProt525 := factory524.GetProtocol(mbTrans522)
    argvalue1 := edam.NewManageNotebookSharesParameters()
    err526 := argvalue1.Read(jsProt525)
    if err526 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.ManageNotebookShares(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getNotebookShares":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetNotebookShares requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetNotebookShares(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
